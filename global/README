                        GLOBAL ARRAYS LIBRARY



DISCLAIMER

This material was prepared as an account of work sponsored by an
agency of the United States Government.  Neither the United States
Government nor the United States Department of Energy, nor Battelle,
nor any of their employees, MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR
ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY,
COMPLETENESS, OR USEFULNESS OF ANY INFORMATION, APPARATUS, PRODUCT,
SOFTWARE, OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE WOULD NOT
INFRINGE PRIVATELY OWNED RIGHTS.



ACKNOWLEDGMENT

This software and its documentation were produced with United States
Government support under Contract Number DE-AC06-76RLO-1830 awarded by
the United States Department of Energy.  The United States Government
retains a paid-up non-exclusive, irrevocable worldwide license to
reproduce, prepare derivative works, perform publicly and display
publicly by or for the US Government, including the right to
distribute to other US Government contractors.



What is new ?
~~~~~~~~~~~~

version 2.1     selection of message-passing (TCGMSG or MPI) library
                new operations: ga_mpi_communicator and ga_proc_topology;
                performance optimizations;
                alternative C interface and C test programs;
                port to Sun Solaris and PC running Linux.

version 2.0     support for networks of multiprocessors (SMP);
		(tightly) integrated shared and distributed memory versions;
                ability to restrict memory usage in global arrays;
		ga_scatter/gather supports integers;
                a program to test performance of GA primitives;
		different numbering of global array handles (< 0);
		and other internal improvements, like randomized order
		of remote operations, prototypes of C-callable ops, etc. 	

version 1.3.1   port to CRAY-T3D;
                new operation ga_summarize;
                improved ga_dgemm.

version 1.3	introduced patch versions of ga_ddot, ga_dscal, ga_dadd;
		also ga_matmul_patch, ga_ifill_patch, ga_dfill_patch, and
		ga_duplicate. 
                ga_copy_patch now has a transpose argument.

version 1.2     (loosely) integrated shared and distributed memory versions


Directory Structure:
~~~~~~~~~~~~~~~~~~~

src      - source code for GA library
testing  - test codes
doc      - documents
trace    - source code for tracing library
X        - source code for GA visualization program


Dependencies on other software:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- TCGMSG or MPI: more or less extensive support is required. For
  example, a message-passing library is used on some platforms to
  fork processes, implement broadcast, ga_dgop;

- MA (memory allocator by Greg Thomas) include files are used to implement 
  MA-like addressing (no libma.a library is required to use GA operations
  on the shared memory platforms, except for ga_diag and ga_symmetrize that 
  still depend on MA, but you need to include mafdecls.h in your code if 
  you want to use ga_access in Fortran);

- GA eigensolver, ga_diag, is a wrapper for the eigensolver from PEIGS library;
  (Please contact George Fann <gi_fann@pnl.gov> for PEIGS)

- BLAS library is required for the eigensolver and ga_dgemm;

- LAPACK library is required for the eigensolver;

- SCALAPACK, PBBLAS, and BLACS libraries are required for ga_lu_solve;
  (Please contact George Fann <gi_fann@pnl.gov> for port of BLACS to TCGMSG.) 

- if you want to use tracing, libtrace.a (built in ./trace) will be required;
  also DGA_TRACE define symbol should be specified for C and Fortran compilers.


  To build the GA toolkit compatible with MPI, you need to define
  environmental variable USE_MPI,  MPI_LIB and MPI_INCLUDE  which should 
  point to the location of the MPI library and include directories. 
  Additionaly, if the TCGMSG-MPI library is not needed, the make/environmental 
  variable MSG_COMMS should be defined as MSG_COMMS = MPI.
  Note that some fortran test programs are using certain TCGMSG utility
  functions (for example, equivalent of C sizeof operator) and therefore
  will not built without TCGMSG or TCGMSG-MPI library.



Makefiles:
~~~~~~~~~

In addition to makefile there are three more files included in makefiles 
located in the subdirectories: Makefile.h  (definitions & include symbols),
MakeFiles.h (file names to be compiled depending on the TARGET machine and
VERSION of memory (shared or distributed), and Makelib.h (specification of
libraries to be linked with when test programs are built).
The user needs to specify TARGET in the ./makefile or on the 
command line when calling make. The library and test programs should be
built by calling make in the current directory. The appropriate value
of VERSION will be determined automatically. 

Valid TARGET is one of: SUN, SGI, IBM, KSR, IPSC, PARAGON, SP1 
Valid VERSION names:    SHMEM, DISMEM
           

Test Programs:
~~~~~~~~~~~~~

      - Programs: test.x, testsolve.x, testeig.x, testpatch.x are
        available to test this software.

      - An example program that uses GA is called jacobi.x. The Jacobi
        iterative method is used to solve a system of linear equations
        generated in the solution process of a partial differential 
        equation by the finite differences method. 

      - You might have to modify Makelib.h to provide pointers to
        the ScaLAPACK and Co., and PEIGS libraries in order to use parallel
        versions of eigensolver and linear equation solver in testeig.x
        test program. 

      - To run test programs you need to use TCGMSG to fork the
	processes on the shared memory and (network of) workstations;
	execute them you should use 'parallel' program -- built in
	tcgmsg/ipcv4.0 -- for example: 
 
              parallel testing/test.x

	assuming that test.x is already built, parallel is accessible
	(you might copy it into your "bin" directory), and you are
	still in the current (g/global/) directory.

        For a single processor execution 'parallel' is
	not required if you have a version > 4.03 of TCGMSG; run it as: 
             
              testing/test.x

        or under control of your favorite debugger. 


        On MPP like T3D, IBM SP, and Intel machines, use appropriate
        system command to specify the number of processors, load and 
        run the programs. For example, to run on four processors of
        the Cray T3D use:

              mppexec testing/test.x -npes 4




Documentation:
~~~~~~~~~~~~~

        An ASCII version of GA documentation is located in doc/global.doc. 

IMPORTANT: 
~~~~~~~~~

      - you need GNU make (version > 3.68) to build this software


Contact for suggestions, comments and bug report:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Jarek Nieplocha
email: <j_nieplocha@pnl.gov> 
phone: (509) 372-4469
mail: Pacific Northwest Laboratory, MSIN: K1-87, Richland, WA 99352 
